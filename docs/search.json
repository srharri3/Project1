[
  {
    "objectID": "Project1.html",
    "href": "Project1.html",
    "title": "ST 558 | Project 1 | Team N",
    "section": "",
    "text": "This project demonstrates use of R for manipulating and processing census datasets via API. Generic functions will auto-summarize and auto-plot returned data. The document will describe how these function and provide examples."
  },
  {
    "objectID": "Project1.html#resources",
    "href": "Project1.html#resources",
    "title": "ST 558 | Project 1 | Team N",
    "section": "Resources",
    "text": "Resources\n\nInformation about the PUMS API\nVariable list (2022)\nAPI call examples\nMenu-based API call explorer\nSample: api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,MAR&SCHL=24&key=YOUR_KEY"
  },
  {
    "objectID": "Project1.html#user-choices",
    "href": "Project1.html#user-choices",
    "title": "ST 558 | Project 1 | Team N",
    "section": "User Choices",
    "text": "User Choices\nUser may choose particular variables or conditions (subsets) to be returned."
  },
  {
    "objectID": "Project1.html#libraries",
    "href": "Project1.html#libraries",
    "title": "ST 558 | Project 1 | Team N",
    "section": "Libraries",
    "text": "Libraries\nEnsuring we have the appropriate libraries for the project and task.\n\n#to help with parsing contents of API calls\nlibrary(jsonlite)\n\n#for API URL building\nlibrary(httr)\n\n#for tidy stuff\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union"
  },
  {
    "objectID": "Project1.html#test-call-to-the-census-api",
    "href": "Project1.html#test-call-to-the-census-api",
    "title": "ST 558 | Project 1 | Team N",
    "section": "Test call to the Census API",
    "text": "Test call to the Census API\nBefore we build functions, let’s just make a simple call without any API key, to ensure it works as expected.\n\n#base URL for example: api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,MAR&SCHL=24&key=YOUR_KEY\ntest_URL &lt;- \"https://api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,MAR,ST&SCHL=24\"\ntest_results &lt;- GET(test_URL)\ntest_parsed_content = fromJSON(rawToChar(test_results$content))\ntest_tibble = as_tibble(test_parsed_content)\n\nWarning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n`.name_repair` is omitted as of tibble 2.0.0.\nℹ Using compatibility `.name_repair`.\n\ntest_tibble\n\n# A tibble: 44,080 × 5\n   V1    V2    V3    V4    V5   \n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1 SEX   PWGTP MAR   ST    SCHL \n 2 2     6     5     17    24   \n 3 2     23    2     06    24   \n 4 1     23    3     42    24   \n 5 1     80    5     49    24   \n 6 1     16    1     18    24   \n 7 1     107   3     18    24   \n 8 2     10    5     13    24   \n 9 1     22    1     39    24   \n10 2     127   5     32    24   \n# ℹ 44,070 more rows\n\n\nSuccess!"
  },
  {
    "objectID": "Project1.html#function-from-get-to-tibble",
    "href": "Project1.html#function-from-get-to-tibble",
    "title": "ST 558 | Project 1 | Team N",
    "section": "Function from GET to tibble",
    "text": "Function from GET to tibble\nNow, let’s write the helper function that takes a GET result and produces a nice tibble.\n\n# function getToTibble\n# purpose: Take results from a Census GET call, which come back with raw JSON, and transform them into a usable tibble that shows only the retrieved content in a friendly format.\n# arguments: get_results (the result of a prior call to GET() on the Census API)\n# returns: tibble corresponding to the parsed, json, raw to char 'content' element of the original GET result\n# error handling: none; only call this function when a valid argument is ready\ngetToTibble &lt;- function(get_results) {\n  parsed_results = fromJSON(rawToChar(get_results$content))\n  tibble_results = as_tibble(parsed_results)\n  return(tibble_results)\n\n}\n\n#check for same end result as original test\ngetToTibble(test_results)\n\n# A tibble: 44,080 × 5\n   V1    V2    V3    V4    V5   \n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1 SEX   PWGTP MAR   ST    SCHL \n 2 2     6     5     17    24   \n 3 2     23    2     06    24   \n 4 1     23    3     42    24   \n 5 1     80    5     49    24   \n 6 1     16    1     18    24   \n 7 1     107   3     18    24   \n 8 2     10    5     13    24   \n 9 1     22    1     39    24   \n10 2     127   5     32    24   \n# ℹ 44,070 more rows\n\n\nSuccess!"
  },
  {
    "objectID": "Project1.html#function-to-customize-api-call-per-user-input",
    "href": "Project1.html#function-to-customize-api-call-per-user-input",
    "title": "ST 558 | Project 1 | Team N",
    "section": "Function to customize API call per user input",
    "text": "Function to customize API call per user input\nThis introduces a fair bit of complexity. We want to enable the user to query the API flexibly, as described below. In this function, we will ensure valid selections and query results for a specific year.\nTo make this manageable, we will use helper functions for tasks like validating arguments.\nNote also that we will include and limit by default to a single ST (state) category, as mentioned in headers. Because 14 is not a valid state in the dataset, we will use the 14th available label, corresponding to ST=17 Illinois/IL. See ST list.\n\nYear of survey\n\nDefault:\n\n2022\n\nValid:\n\nInteger in [2010,2022]\n\nFunction: checkYear()\n\nNumeric var(s) to return\n\nDefault:\n\nAGEP\nPWGTP (req)\n\nValid:\n\nAGEP\nGASP\nGRPIP\nJWAP (time)\nJWDP (time)\nJWMNP\n\nConditions:\n\nTranslate variables to numeric or time (middle of period) as applicable.\nAt least one numeric var other than PWGTP must be returned.\nEnsure valid user entries.\n\nFunction: checkNumVars()\n\nCategorical var(s) to return\n\nDefault:\n\nSEX\n\nValid:\n\nFER\nHHL\nHISPEED\nJWTRNS\nSCH\nSCHL\nSEX\n\nConditions:\n\nTranslate variables into factors with appropriate levels as applicable.\nAt least one categorical variable must be returned.\nEnsure valid user entries.\n\nFunction: checkCatVars()\n\nGeography level\n\nDefault:\n\nAll\n\nValid:\n\nAll\nRegion\nDivision\nState\n\nConditions:\n\nEnsure valid user entries.\n\nFunction: checkGeo()\n\nSubset geo argument (to adjust API call made)\n\nConditions:\n\nUser can specify specific Regions, Divisions, or States.\nOnly specific levels selected will be returned.\nEnsure valid user entries.\n\n\n\n\nCheck year\n\nDefault:\n\n2022\n\nValid:\n\nInteger in [2010,2022]\n\nFunction: checkYear()\n\n\n# function checkYear()\n# purpose: Confirm that passed integer value is within [2010,2022].\n# arguments: yr (integer)\n# returns: TRUE for a successful value, FALSE else (including error)\n# error handling: FALSE for non-int\ncheckYear &lt;- function(yr) {\n\n  #set FALSE if non-int or out of bounds\n  pass &lt;- case_when(\n    yr%%1 != 0 ~ FALSE,\n    yr &lt; 2010 ~ FALSE,\n    yr &gt; 2022 ~ FALSE,\n    TRUE ~ TRUE\n  )\n  \n  #TRUE if valid\n  return(pass)\n}\n\n\n\nNumeric vars\n\nDefault:\n\nAGEP\nPWGTP (req)\n\nValid:\n\nAGEP\nGASP\nGRPIP\nJWAP (time)\nJWDP (time)\nJWMNP\nPWGTP\n\nConditions:\n\nTranslate variables to numeric or time (middle of period) as applicable.\nAt least one numeric var other than PWGTP must be returned.\nEnsure valid user entries.\n\nFunction: checkNumVars()\n\n\n# function checkNumVars()\n# purpose: Confirm that numeric variable names passed are within the legitimate set.\n# arguments: vars (vector of chars)\n# returns: TRUE for all successful values, FALSE else\n# error handling: none; assumes a vector of characters for expected behavior\ncheckNumVars &lt;- function(vars) {\n  \n  #init pass. If it remains TRUE, return will be TRUE (passes check)\n  pass = TRUE\n  \n  #cycle through all values in the vector\n  for (var_i in vars) {\n    \n    #if value of element not in list, toggle pass to FALSE\n    if (!(var_i %in% c('AGEP',\n                       'GASP',\n                       'GRPIP',\n                       'JWAP',\n                       'JWDP',\n                       'JWMNP',\n                       'PWGTP')))\n      pass = FALSE\n  }\n  \n  return(pass)\n}\n\n\n\nCategorical vars\n\nDefault:\n\nSEX\n\nValid:\n\nFER\nHHL\nHISPEED\nJWTRNS\nSCH\nSCHL\nSEX\n\nConditions:\n\nTranslate variables into factors with appropriate levels as applicable.\nAt least one categorical variable must be returned.\nEnsure valid user entries.\n\nFunction: checkCatVars()\n\n\n# function checkCatVars()\n# purpose: Confirm that categorical variable names passed are within the legitimate set.\n# arguments: vars (vector of chars)\n# returns: TRUE for all successful values, FALSE else\n# error handling: none; assumes a vector of characters for expected behavior\ncheckCatVars &lt;- function(vars) {\n  \n  #init pass. If it remains TRUE, return will be TRUE (passes check)\n  pass = TRUE\n  \n  #cycle through all values in the vector\n  for (var_i in vars) {\n    \n    #if value of element not in list, toggle pass to FALSE\n    if (!(var_i %in% c('SEX',\n                       'FER',\n                       'HHL',\n                       'HISPEED',\n                       'JWTRNS',\n                       'SCH',\n                       'SCHL')))\n      pass = FALSE\n  }\n  \n  return(pass)\n}\n\n\n\nGeography level\n\nDefault:\n\nAll\n\nValid:\n\nAll\nRegion\nDivision\nState\n\nConditions:\n\nEnsure valid user entries.\n\nFunction: checkGeo()\n\n\n# function checkGeo()\n# purpose: Confirm that geo selections passed are within the legitimate set.\n# arguments: geo (char string)\n# returns: TRUE for all successful values, FALSE else (includes error)\n# error handling: none; geo must be length 1\ncheckGeo &lt;- function(geo) {\n  \n  #set FALSE if longer than 1 or out of bounds\n  if (length(geo) != 1) pass = FALSE\n  else if (geo %in% c('All',\n                      'Region',\n                      'Division',\n                      'State'))\n    pass = TRUE\n  else\n    pass = FALSE\n  \n  #TRUE if valid\n  return(pass)\n\n}\n\n\n\nQuery Function\nThis function will build and get the URL with the appropriate elements built into the query string. It will ensure valid arguments first, then build the call, then send it and return the result of the GET command.\n\n# function queryCensus()\n# purpose: Build and call census API.\n# arguments:\n#     yr: year to query\n#     numVars: vector of chars, 1 or more\n#     catVars: vector of chars, 1 or more\n#     geoLevel: one string matching permitted values\n#     geoSubset: vector of chars, 1 or more, for subset by geoLevel (no restrictions)\n# returns: either NA (if invalid) or result of the GET call\n# error handling: error if any parameters are invalid\nqueryCensus &lt;- function(yr = 2022,\n                        numVars = c('AGEP','PWGTP'),\n                        catVars = 'SEX',\n                        geoLevel = 'All',\n                        geoSubset = 17 ) { \n\n  #validate arguments\n  status &lt;- checkYear(yr) &\n            checkNumVars(numVars) &\n            checkCatVars(catVars) &\n            checkGeo(geoLevel)\n  #if any of these failed, status is now FALSE\n  #if so, exit with NA\n  if (!status) return(NA)\n  \n  #otherwise, proceed and combine strings appropriately for query parameters\n\n  #combine numeric and categorical vars for the get parameter\n  get_param &lt;- paste(paste(numVars,sep = ',',collapse = ','),\n                     ',',\n                     paste(catVars,sep = ',',collapse = ','),\n                     sep = '',\n                     collapse = ''\n  )\n  \n  #since geo level passed validation, only need to switch 'All' for 'State' if applicable\n  geoLevelCode &lt;- if(geoLevel == 'All') 'State' else geoLevel\n  \n  #prepare subset strings\n  subset_param &lt;- paste(paste(geoSubset,sep = ',',collapse = ','),\n                        sep = '',\n                        collapse = ''\n                        )\n  \n  ###############\n  #this is how to do the state stuff\n  #can remove all the 'ST' garbage above\n  #https://api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,MAR,ST&SCHL=24&for=state:13,14,15,16,17&SCHL=24\n  \n  \n  \n  #base URL for example: api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,MAR&SCHL=24&key=YOUR_KEY\n  #build and call API\n  base_URL1 &lt;- \"https://api.census.gov/data/\"\n  base_URL2 &lt;- \"/acs/acs1/pums?\"\n  query_URL &lt;- paste(base_URL1,\n                     yr,\n                     base_URL2,\n                     'get=',\n                     get_param,\n                     '&for=',\n                     geoLevelCode,\n                     ':',\n                     subset_param,\n                     sep = '',\n                     collapse = '')\n  \n  #print(query_URL)\n  \n  query_results &lt;- GET(query_URL)\n  return(query_results)\n}\n\n\n\nField vectorization function\nHere, we need to adjust times and categories into ideal display values in our tibble. For instance, ‘HISPEED’ has three values 0,1,2 which correspond to N/A, Yes, No. We need to transform columns like this, accordingly.\n\n\nDO MORE STUFF HERE ################"
  },
  {
    "objectID": "Project1.html#validating-query-function-single-year",
    "href": "Project1.html#validating-query-function-single-year",
    "title": "ST 558 | Project 1 | Team N",
    "section": "Validating query function (single year)",
    "text": "Validating query function (single year)\nNow, let’s run some sample calls.\n\ntest_results &lt;- getToTibble(\n  queryCensus(yr=2022,catVars=c('SEX','HISPEED'),geoLevel='Division',geoSubset = 2,numVars=c('AGEP','PWGTP','GASP'))\n)\ntest_results\n\n# A tibble: 429,663 × 6\n   V1    V2    V3    V4    V5      V6      \n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   \n 1 AGEP  PWGTP GASP  SEX   HISPEED division\n 2 19    31    3     2     0       2       \n 3 20    24    3     1     0       2       \n 4 56    21    3     1     0       2       \n 5 75    72    3     1     0       2       \n 6 21    30    3     1     0       2       \n 7 42    7     3     2     0       2       \n 8 20    53    3     2     0       2       \n 9 31    47    3     1     0       2       \n10 21    11    3     2     0       2       \n# ℹ 429,653 more rows\n\n\nSuccess!\nNote that if syntax changes or limitations exist for other years of data (for instance, say ‘HISPEED’ was not available in year X), requests may fail.\n\nWrite a function to allow user to specify multiple years of survey data and all other options above.\n\nConditions:\n\nCall single year function repeatedly as needed.\nCombine data into one final tibble, including year variable."
  }
]