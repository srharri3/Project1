---
title: "ST 558 | Project 1 | Team N"
author: Savannah Harrison, Andy Powers
format: html
editor: visual
---

# Introduction

This project demonstrates use of R for manipulating and processing census datasets via API. Generic functions will auto-summarize and auto-plot returned data. The document will describe how these function and provide examples.

# Data Source

We will query the *Public Use Microdata Sample (PUMS) Census API*. The API offers *pseudo person-level* data. To demonstrate our functions while avoiding memory errors, we will default to a subset of state 14 data. Users may adjust this within our function calls.

## Resources

-   [Information about the PUMS API](https://www.census.gov/data/developers/data-sets/census-microdata-api.html)
-   [Variable list (2022)](https://api.census.gov/data/2022/acs/acs1/pums/variables.html)
-   [API call examples](https://api.census.gov/data/2022/acs/acs1/pums/examples.html)
-   [Menu-based API call explorer](https://data.census.gov/mdat/#/)
-   Sample: `api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,MAR&SCHL=24&key=YOUR_KEY`

## User Choices

User may choose particular variables or conditions (subsets) to be returned.

# Data Processing

We will follow these steps for data processing:

1.  Achieve a basic call to a sample API endpoint, returning a tibble.

2.  Write a *helper* function to take the return from `GET()` and modify it into a `tibble`.

3.  Write a function to query API, with editable parameters.

4.  Write a function to allow user to specify multiple years of survey data **and** all other options above.

More details including valid arguments, etc. will be listed below, as we address each step.

## Libraries

Ensuring we have the appropriate libraries for the project and task.

```{r}
#to help with parsing contents of API calls
library(jsonlite)

#for API URL building
library(httr)

#for tidy stuff
library(dplyr)
```

## Test call to the Census API

Before we build functions, let's just make a simple call without any API key, to ensure it works as expected.

```{r}
#base URL for example: api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,MAR&SCHL=24&key=YOUR_KEY
test_URL <- "https://api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,MAR,ST&SCHL=24"
test_results <- GET(test_URL)
test_parsed_content = fromJSON(rawToChar(test_results$content))
test_tibble = as_tibble(test_parsed_content)
test_tibble
```

Success!

## Function from GET to tibble

Now, let's write the helper function that takes a GET result and produces a nice tibble.

```{r}
# function getToTibble
# purpose: Take results from a Census GET call, which come back with raw JSON, and transform them into a usable tibble that shows only the retrieved content in a friendly format.
# arguments: get_results (the result of a prior call to GET() on the Census API)
# returns: tibble corresponding to the parsed, json, raw to char 'content' element of the original GET result
# error handling: none; only call this function when a valid argument is ready
getToTibble <- function(get_results) {
  parsed_results = fromJSON(rawToChar(get_results$content))
  tibble_results = as_tibble(parsed_results)
  return(tibble_results)

}

#check for same end result as original test
getToTibble(test_results)
```

Success!

## Function to customize API call per user input

This introduces a fair bit of complexity. We want to enable the user to query the API flexibly, as described below. In this function, we will ensure valid selections and query results for a specific year.

To make this manageable, we will use helper functions for tasks like validating arguments.

*Note also that we will include and limit by default to a single ST (state) category, as mentioned in headers. Because `14` is not a valid state in the dataset, we will use the 14th available label, corresponding to ST=17 Illinois/IL. See [ST list](https://api.census.gov/data/2022/acs/acs1/pums/variables/ST.json).*

1.  Year of survey
    -   Default:
        -   2022
    -   Valid:
        -   Integer in \[2010,2022\]
    -   Function: checkYear()
2.  Numeric var(s) to return
    -   Default:
        -   AGEP
        -   PWGTP (req)
    -   Valid:
        -   AGEP
        -   GASP
        -   GRPIP
        -   JWAP (time)
        -   JWDP (time)
        -   JWMNP
    -   Conditions:
        -   Translate variables to numeric or time (middle of period) as applicable.
        -   At least one numeric var other than PWGTP must be returned.
        -   Ensure valid user entries.
    -   Function: checkNumVars()
3.  Categorical var(s) to return
    -   Default:
        -   SEX
    -   Valid:
        -   FER
        -   HHL
        -   HISPEED
        -   JWTRNS
        -   SCH
        -   SCHL
        -   SEX
    -   Conditions:
        -   Translate variables into factors with appropriate levels as applicable.
        -   At least one categorical variable must be returned.
        -   Ensure valid user entries.
    -   Function: checkCatVars()
4.  Geography level
    -   Default:
        -   All
    -   Valid:
        -   All
        -   Region
        -   Division
        -   State
    -   Conditions:
        -   Ensure valid user entries.
    -   Function: checkGeo()
5.  Subset geo argument (to adjust API call made)
    -   Conditions:
        -   User can specify specific Regions, Divisions, or States.
        -   Only specific levels selected will be returned.
        -   Ensure valid user entries.

### Check year
- Default: 
    - 2022 
- Valid: 
    - Integer in \[2010,2022\] 
- Function: checkYear()

```{r}
# function checkYear()
# purpose: Confirm that passed integer value is within [2010,2022].
# arguments: yr (integer)
# returns: TRUE for a successful value, FALSE else (including error)
# error handling: FALSE for non-int
checkYear <- function(yr) {

  #set FALSE if non-int or out of bounds
  pass <- case_when(
    yr%%1 != 0 ~ FALSE,
    yr < 2010 ~ FALSE,
    yr > 2022 ~ FALSE,
    TRUE ~ TRUE
  )
  
  #TRUE if valid
  return(pass)
}
```

### Numeric vars

-   Default:
    -   AGEP
    -   PWGTP (req)
-   Valid:
    -   AGEP
    -   GASP
    -   GRPIP
    -   JWAP (time)
    -   JWDP (time)
    -   JWMNP
    -   PWGTP
-   Conditions:
    -   Translate variables to numeric or time (middle of period) as applicable.
    -   At least one numeric var other than PWGTP must be returned.
    -   Ensure valid user entries.
-   Function: checkNumVars()

```{r}
# function checkNumVars()
# purpose: Confirm that numeric variable names passed are within the legitimate set.
# arguments: vars (vector of chars)
# returns: TRUE for all successful values, FALSE else
# error handling: none; assumes a vector of characters for expected behavior
checkNumVars <- function(vars) {
  
  #init pass. If it remains TRUE, return will be TRUE (passes check)
  pass = TRUE
  
  #cycle through all values in the vector
  for (var_i in vars) {
    
    #if value of element not in list, toggle pass to FALSE
    if (!(var_i %in% c('AGEP',
                       'GASP',
                       'GRPIP',
                       'JWAP',
                       'JWDP',
                       'JWMNP',
                       'PWGTP')))
      pass = FALSE
  }
  
  return(pass)
}
```

### Categorical vars

-   Default:
    -   SEX
-   Valid:
    -   FER
    -   HHL
    -   HISPEED
    -   JWTRNS
    -   SCH
    -   SCHL
    -   SEX
-   Conditions:
    -   Translate variables into factors with appropriate levels as applicable.
    -   At least one categorical variable must be returned.
    -   Ensure valid user entries.
-   Function: checkCatVars()

```{r}
# function checkCatVars()
# purpose: Confirm that categorical variable names passed are within the legitimate set.
# arguments: vars (vector of chars)
# returns: TRUE for all successful values, FALSE else
# error handling: none; assumes a vector of characters for expected behavior
checkCatVars <- function(vars) {
  
  #init pass. If it remains TRUE, return will be TRUE (passes check)
  pass = TRUE
  
  #cycle through all values in the vector
  for (var_i in vars) {
    
    #if value of element not in list, toggle pass to FALSE
    if (!(var_i %in% c('SEX',
                       'FER',
                       'HHL',
                       'HISPEED',
                       'JWTRNS',
                       'SCH',
                       'SCHL')))
      pass = FALSE
  }
  
  return(pass)
}
```

### Geography level

-   Default:
    -   All
-   Valid:
    -   All
    -   Region
    -   Division
    -   State
-   Conditions:
    -   Ensure valid user entries.
-   Function: checkGeo()

```{r}
# function checkGeo()
# purpose: Confirm that geo selections passed are within the legitimate set.
# arguments: geo (char string)
# returns: TRUE for all successful values, FALSE else (includes error)
# error handling: none; geo must be length 1
checkGeo <- function(geo) {
  
  #set FALSE if longer than 1 or out of bounds
  if (length(geo) != 1) pass = FALSE
  else if (geo %in% c('All',
                      'Region',
                      'Division',
                      'State'))
    pass = TRUE
  else
    pass = FALSE
  
  #TRUE if valid
  return(pass)

}
```

### Query Function

This function will build and get the URL with the appropriate elements built into the query string. It will ensure valid arguments first, then build the call, then send it and return the result of the GET command.
```{r}
# function queryCensus()
# purpose: Build and call census API.
# arguments:
#     yr: year to query
#     numVars: vector of chars, 1 or more
#     catVars: vector of chars, 1 or more
#     geoLevel: one string matching permitted values
#     geoSubset: vector of chars, 1 or more, for subset by geoLevel (no restrictions)
# returns: either NA (if invalid) or result of the GET call
# error handling: error if any parameters are invalid
queryCensus <- function(yr = 2022,
                        numVars = c('AGEP','PWGTP'),
                        catVars = 'SEX',
                        geoLevel = 'All',
                        geoSubset = 17 ) { 

  #validate arguments
  status <- checkYear(yr) &
            checkNumVars(numVars) &
            checkCatVars(catVars) &
            checkGeo(geoLevel)
  #if any of these failed, status is now FALSE
  #if so, exit with NA
  if (!status) return(NA)
  
  #otherwise, proceed and combine strings appropriately for query parameters

  #combine numeric and categorical vars for the get parameter
  get_param <- paste(paste(numVars,sep = ',',collapse = ','),
                     ',',
                     paste(catVars,sep = ',',collapse = ','),
                     sep = '',
                     collapse = ''
  )
  
  #since geo level passed validation, only need to switch 'All' for 'State' if applicable
  geoLevelCode <- if(geoLevel == 'All') 'State' else geoLevel
  
  #prepare subset strings
  subset_param <- paste(paste(geoSubset,sep = ',',collapse = ','),
                        sep = '',
                        collapse = ''
                        )
  
  ###############
  #this is how to do the state stuff
  #can remove all the 'ST' garbage above
  #https://api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,MAR,ST&SCHL=24&for=state:13,14,15,16,17&SCHL=24
  
  
  
  #base URL for example: api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,MAR&SCHL=24&key=YOUR_KEY
  #build and call API
  base_URL1 <- "https://api.census.gov/data/"
  base_URL2 <- "/acs/acs1/pums?"
  query_URL <- paste(base_URL1,
                     yr,
                     base_URL2,
                     'get=',
                     get_param,
                     '&for=',
                     geoLevelCode,
                     ':',
                     subset_param,
                     sep = '',
                     collapse = '')
  
  #print(query_URL)
  
  query_results <- GET(query_URL)
  return(query_results)
}
```

### Field vectorization function
Here, we need to adjust times and categories into ideal display values in our tibble. For instance, 'HISPEED' has three values 0,1,2 which correspond to N/A, Yes, No. We need to transform columns like this, accordingly.

################ 
DO MORE STUFF HERE
################



## Validating query function (single year)
Now, let's run some sample calls.

```{r}
test_results <- getToTibble(
  queryCensus(yr=2022,catVars=c('SEX','HISPEED'),geoLevel='Division',geoSubset = 2,numVars=c('AGEP','PWGTP','GASP'))
)
test_results
```

Success!

*Note that if syntax changes or limitations exist for other years of data (for instance, say 'HISPEED' was not available in year X), requests may fail.*


4.  Write a function to allow user to specify multiple years of survey data **and** all other options above.

    -   Conditions:
        -   Call single year function repeatedly as needed.
        -   Combine data into one final tibble, including `year` variable.

# Person Level Records

The Census data returns a form of compressed results, where identical rows representing multiple people are condensed to one row with the field `PWGTP` representing the number of observations (people) associated with that row. We will not replicate these rows to keep our table smaller and simpler, but it must be considered for data summarization to ensure proper proportions are understood.

# Summarizing...

Savannah!
