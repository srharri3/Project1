---
title: "ST 558 | Project 1 | Team N"
author: Savannah Harrison, Andy Powers
format: html
editor: visual
---

# Introduction

This project demonstrates the use of R for collecting, processing, and studying US Census data via its API. The data processing functions will allow a variety of fields to be pulled or subset, via their arguments. Data summary functions will auto-summarize and auto-plot the returned data. Lastly, we add commentary and analysis of some points of interest.

# Data Source

We will query the *Public Use Microdata Sample (PUMS) Census API*. The API offers *pseudo person-level* data. To demonstrate our functions while avoiding memory errors, we will default to a subset of data from state 17 Illinois. Users may adjust this subset and fields pulled via function arguments.

## API Resources

-   [Information about the PUMS API](https://www.census.gov/data/developers/data-sets/census-microdata-api.html)
-   [Variable list (2022)](https://api.census.gov/data/2022/acs/acs1/pums/variables.html)
-   [API call examples](https://api.census.gov/data/2022/acs/acs1/pums/examples.html)
-   [Menu-based API call explorer](https://data.census.gov/mdat/#/)
-   Sample API call: `api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,MAR&SCHL=24&key=YOUR_KEY`

## API Fields

Per the syllabus, our functions will accommodate retrieval of the following fields.

1.  Year of survey
    -   Default:
        -   2022
    -   Valid:
        -   Integer in \[2010,2022\]
    -   Conditions:
        -   In query function, only one year is accessed per query. Multiple years will be looped with multiple calls.
2.  Numeric var(s)
    -   Default:
        -   AGEP
        -   PWGTP (always)
    -   Valid:
        -   AGEP
        -   GASP
        -   GRPIP
        -   JWAP (time)
        -   JWDP (time)
        -   JWMNP
    -   Conditions:
        -   Translate variables to numeric or time (middle of period) as applicable.
        -   PWGTP and at least one additional numeric var must be returned.
        -   Ensure valid user entries.
3.  Categorical var(s)
    -   Default:
        -   SEX
    -   Valid:
        -   FER
        -   HHL
        -   HISPEED
        -   JWTRNS
        -   SCH
        -   SCHL
        -   SEX
    -   Conditions:
        -   Translate variables into factors with appropriate levels as applicable.
        -   At least one categorical variable must be returned.
        -   Ensure valid user entries.
4.  Geography level
    -   Default:
        -   All
    -   Valid:
        -   All
        -   Region
        -   Division
        -   State
    -   Conditions:
        -   One selection only.
        -   Ensure valid user entries.
5.  Geography subsets
    -   Default:
        -   17
    -   Valid:
        -   N/A (no error checking provided)
    -   Conditions:
        -   User can specify specific Regions, Divisions, or States.
        -   Only specific levels selected will be returned.

# Data Processing

## Plan

We will follow these steps to develop our data processing functions.

1.  Begin by testing a sample API call.

2.  Develop a helper function to process results from `GET()` into a useful `tibble`.

3.  Develop a function to build and query the API according to user parameters, for one year.

4.  Develop a function to process the API results into proper variable types and factors.

5.  Develop a function to allow for multi-year query handling, processing the result into a single `tibble`.

*Note that if syntax changes or limitations exist for certain years of data (for instance, say 'HISPEED' was not available in year X), requests may fail. All functions are tested and validated for the 2022 API endpoint, at a minimum.*

## Libraries

Loading necessary libraries for API processing and tidyverse functions.

```{r}
#to help with parsing contents of API calls
library(jsonlite)

#for API URL building
library(httr)

#for tidy stuff
library(dplyr)
library(magrittr)
library(tidyr)
library(RSQLite)
```

## Sample API Test

Before we build functions, let's just make a simple call to ensure we understand how to build the query and process its results. 

We will call this sample URL:
`https://api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,MAR,ST&SCHL=24`

```{r}

#build URL
test_URL <- "https://api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,MAR,ST&SCHL=24"

#get url
test_results <- GET(test_URL)

#pull content JSON branch and convert to char
test_parsed_content <- fromJSON(rawToChar(test_results$content))

#convert to tibble
test_tibble <- as_tibble(test_parsed_content)

#display test
test_tibble

```

Success!


## Helper Functions

### Fcn: Get Lookup [Table]

In order to process API results into proper variable types and factors, we use this helper function to pull the lookup table for a provided variable.

```{r}
# function:
#   getLookup(varName,year=2022)

# purpose:
#   Format and call API to get variable lookup data. Returns a 2-column tibble of keys and labels.
#   Sample data dictionary call: https://api.census.gov/data/YEAR/acs/acs1/pums/variables/VARNAME.json

# arguments: 
#   varName - the variable we want to pull
#   year - the year of the data dictionary to pull (default 2022)

# returns: 
#   2-column tibble of keys and labels.

# error handling: 
#   none!!

getLookup <- function(varName, year=2022) {
  
  #prepare API dictionary call
  lookup_URL_base1 <- 'https://api.census.gov/data/'
  lookup_URL_base2 <- '/acs/acs1/pums/variables/'
  lookup_URL_suffix <- '.json'
  lookup_URL <- paste(lookup_URL_base1,
                      year,
                      lookup_URL_base2,
                      varName,
                      lookup_URL_suffix,
                      sep = '',
                      collapse = '')
  
  #pull result and get tibble, keep only the values/items
  lookup_URL_result <- GET(lookup_URL) |> getToTibble()
  
  #keep only the needed parts in values:item, order by keys
  lookup_valuesItem <- lookup_URL_result$values$item
  lookup_list <- lookup_valuesItem[sort(names(lookup_valuesItem))]
  
  #format as a long tibble
  lookup_tibble <- lookup_list |> as_tibble() |> pivot_longer(cols=everything())
  
  #return long, 2-column tibble
  return(lookup_tibble)
  
}
```

### Fcn: Check Year

This function takes an argument of *year* and returns `TRUE` if it is valid for our project.

Valid arguments: A single year in the range [2010,2022]

```{r}
# function:
#   checkYear(year)

# purpose:
#   Confirm that passed integer value is within [2010,2022].

# arguments: 
#   year - the year to check

# returns: 
#   TRUE for successful validation, FALSE else (including error)

# error handling: 
#   FALSE for non-integer

checkYear <- function(year) {

  validation <- case_when(
    year%%1 != 0 ~ FALSE, #non-int = FALSE
    year < 2010 ~ FALSE,  #below 2010 = FALSE
    year > 2022 ~ FALSE,  #over 2022 = FALSE
    TRUE ~ TRUE           #else = TRUE
  )
  
  return(validation)
  
}
```

### Fcn: Check Num[eric] Vars

This function takes an argument of a vector of characters representing the set of numeric variables being requested. It validates them and returns `TRUE` if the entire set is valid.

Valid arguments: 1+ strings only from the set [AGEP,GASP,GRPIP,JWAP,JWDP,JWMNP,PWGTP]

```{r}
# function:
#   checkNumVars(vars)

# purpose:
#   Confirm that numeric variable names passed are within the legitimate set.

# arguments: 
#   vars - vector of chars

# returns: 
#   TRUE if all elements pass validation, FALSE else

# error handling: 
#   none!!

checkNumVars <- function(vars) {

  #init validation. If it remains TRUE, validation successful.
  validation <- TRUE
  
  #cycle through all values in the vector
  for (var_i in vars) {
    
    #if value of element not in list, toggle validation to FALSE
    if (!(var_i %in% c('AGEP',
                       'GASP',
                       'GRPIP',
                       'JWAP',
                       'JWDP',
                       'JWMNP',
                       'PWGTP')))
      validation <- FALSE
  }
  
  return(validation)
}
```

### Fcn: Check Cat[egorical] Vars

This function takes an argument of a vector of characters representing the set of categorical variables being requested. It validates them and returns `TRUE` if the entire set is valid.

Valid arguments: 1+ strings only from the set [SEX,FER,HHL,HISPEED,JWTRNS,SCH,SCHL]

```{r}
# function:
#   checkCatVars(vars)

# purpose:
#   Confirm that categorical variable names passed are within the legitimate set.

# arguments: 
#   vars - vector of chars

# returns: 
#   TRUE if all elements pass validation, FALSE else

# error handling: 
#   none!!

checkCatVars <- function(vars) {

  #init validation. If it remains TRUE, validation successful.
  validation <- TRUE
  
  #cycle through all values in the vector
  for (var_i in vars) {
    
    #if value of element not in list, toggle validation to FALSE
    if (!(var_i %in% c('SEX',
                       'FER',
                       'HHL',
                       'HISPEED',
                       'JWTRNS',
                       'SCH',
                       'SCHL')))
      validation <- FALSE
  }
  
  return(validation)
}
```

### Fcn: Check Geo[graphy Level]

This function takes an argument of a character string representing the geography level for subsetting. It validates the requested type is within the accepted list, returning `TRUE` if so.

Valid arguments: A string from the set [All,Region,Division,State]

```{r}
# function:
#   checkGeo(geoLevel)

# purpose:
#   Confirm that geography level is a single string within legitimate set.

# arguments: 
#   geoLevel - string

# returns: 
#   TRUE if element passes validation, FALSE else

# error handling: 
#   FALSE if vector length is beyond 1 string

checkGeo <- function(geoLevel) {
  
  #set FALSE if longer than 1 or out of bounds
  if (length(geoLevel) != 1) 
    
    validation = FALSE
  
  else if (geoLevel %in% c('All',
                           'Region',
                           'Division',
                           'State'))
    
    validation = TRUE
  
  else
    
    validation = FALSE
  
  #TRUE if valid
  return(validation)
}
```





## Main Functions

### Fcn: [From] GET to Tibble

Now, let's develop the helper function to process results from `GET()` into a useful `tibble`.

```{r}
# function:
#   getToTibble(get_results)

# purpose:
#   Take results from a Census GET call, which come back with raw JSON, and transform them into a usable tibble that shows only the retrieved content in a friendly format.

# arguments: 
#   get_results - the result of a prior call to GET() on the Census API

# returns: 
#   tibble corresponding to the parsed, json, raw to char 'content' element of the original GET result

# error handling: 
#   none!!

getToTibble <- function(get_results) {
  
  #pull content JSON branch and convert to char
  parsed_results <- fromJSON(rawToChar(get_results$content))
  
  #convert to tibble
  tibble_results = as_tibble(parsed_results)  

  #return tibble
  return(tibble_results)
}
```

Let's confirm that our function produces the same result as our earlier manual API call.
```{r}
getToTibble(test_results)
```

Success!


### Fcn: Query [the] Census [API]

Developing a function to build and query the API according to user parameters is complex. 

It requires a good deal of error checking to ensure valid field names. Helper functions will be used for validating parameters. Defaults will exist for parameters, including a default to subset by *State = 17 Illinois/IL* to keep data sizes manageable (unless otherwise specified in the function call).

For a reminder of valid fields, consult the previous section on *API Fields*.

```{r}
# function:
#   queryCensus(year=2022,numVars=c('AGEP','PWGTP'),catVars='SEX',geoLevel='All',geoSubset=17)

# purpose:
#   Build and call the Census API, returning NA if invalid or the result of the correct GET call.

# arguments: 
#   year - year to query
#   numVars - vector of chars, 1 or more
#   catVars - vector of chars, 1 or more
#   geoLevel - one string matching permitted values
#   geoSubset - vector of chars, 1 or more, for subset by geoLevel (no restrictions)

# returns: 
#   NA if even one parameter is invalid, else the result of the GET call

# error handling: 
#   NA if any parameter is invalid

queryCensus <- function(year = 2022,
                        numVars = c('AGEP','PWGTP'),
                        catVars = 'SEX',
                        geoLevel = 'All',
                        geoSubset = 17 ) { 

  #validate arguments
  status <- checkYear(year) &
            checkNumVars(numVars) &
            checkCatVars(catVars) &
            checkGeo(geoLevel)
  #if any of these failed, status is now FALSE and exit returning NA
  if (!status) 
    return(NA)
  
  #otherwise, proceed and combine strings appropriately for query parameters

  #combine numeric and categorical vars for the get parameter
  get_param <- paste(paste(numVars,sep = ',',collapse = ','),
                     ',',
                     paste(catVars,sep = ',',collapse = ','),
                     sep = '',
                     collapse = ''
  )
  
  #since geo level passed validation, only need to switch 'All' for 'State' if applicable
  geoLevelCode <- if(geoLevel == 'All') 'State' else geoLevel
  
  #prepare subset strings
  subset_param <- paste(paste(geoSubset,sep = ',',collapse = ','),
                        sep = '',
                        collapse = ''
                        )
  
  ###############
  #this is how to do the state stuff
  #can remove all the 'ST' garbage above
  #https://api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,MAR,ST&SCHL=24&for=state:13,14,15,16,17&SCHL=24
  
  
  
  #base URL for example: api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,MAR&SCHL=24&key=YOUR_KEY
  #build and call API
  base_URL1 <- "https://api.census.gov/data/"
  base_URL2 <- "/acs/acs1/pums?"
  query_URL <- paste(base_URL1,
                     year,
                     base_URL2,
                     'get=',
                     get_param,
                     '&for=',
                     geoLevelCode,
                     ':',
                     subset_param,
                     sep = '',
                     collapse = '')
  
  #display the final URL for helpful reference
  print(query_URL)
  
  #run query and return GET results
  query_results <- GET(query_URL)
  
  return(query_results)
}
```

### Fcn: Format [API] Results

We need to adjust numeric fields from char to num/time and replace enumerated categorical field values with representative labels in our tibble. For instance, 'HISPEED' has three values 0,1,2 which correspond to N/A, Yes, No. 

We need to transform each column according to its type and lookup values. Also, we take the header names from row 1 into the column labels, removing row 1.

```{r}
# function:
#   formatResults(results,year=2022)

# purpose:
#   Replace columns of the tibble with appropriate type and values. Also fix column labels/header.

# arguments: 
#   results - tibble of Census results
#   year - year to query

# returns: 
#   Adjusted, formatted tibble

# error handling: 
#   none!!

formatResults <- function(results,year=2022) {
  
  #if year is a field, get ready to swap it back
  if ('Year' %in% names(results))
    year_on <- TRUE
  else
    year_on <- FALSE
  
  #update the column names from row1
  names(results) <- results[1,]
  
  #fix year if needed
  if (year_on) attributes(results)$names[length(results)] <- 'Year'
  
  #remove row1
  results <- results[-1,]
  
  #vector of all possible GET variables that may require revision
  all_variables = c('AGEP', #NUMERICS
                    'PWGTP',
                    'GASP',
                    'GRPIP',
                    'JWMNP',
                    'JWAP', #TIME
                    'JWDP',
                    'SEX', #CATEGORICAL
                    'FER',
                    'HHL',
                    'HISPEED',
                    'JWTRNS',
                    'SCH',
                    'SCHL',
                    'Region',
                    'Division',
                    'State')
  
  #vectors of all possible variables by types
  numeric_variables = c('AGEP',
                        'PWGTP',
                        'GASP',
                        'GRPIP',
                        'JWMNP')
  time_variables = c('JWAP',
                     'JWDP')
  cat_variables = c('SEX',
                    'FER',
                    'HHL',
                    'HISPEED',
                    'JWTRNS',
                    'SCH',
                    'SCHL',
                    'Region',
                    'Division',
                    'State')
  
  #loop through all possible vars requiring update
  #if it exists in our tibble as a column, revise the column type appropriately
  for (varName in all_variables) {
  
    #loop through all columns in tibble
    for (colName in names(results)) {

      #if a match 
      if (varName == colName) {
        
        #for a numeric type, swap its contents to numeric
        if (varName %in% numeric_variables) {
          results[varName] <- as.numeric(results[[varName]])
        }
        
        #for a time type, swap its contents to numeric
     #   if (varName %in% time_variables) {
      #    results |> mutate(varName = as.numeric(results[varName]))
         
          #revise values 
#        }
        
        #for a categ type, swap its contents from index to label 
        if (varName %in% cat_variables) {

          #pull lookup table for cat var
          #special handling if 'State' because that has to lookup using "ST"
          if(varName=='State')
            lookup <- getLookup('ST',year)
          else
            lookup <- getLookup(varName,year)
          
          #make a temp join but only keep the replaced char labels in the result column
          temp <- results[varName]
          names(temp)='name'
          temp_join <- left_join(temp,lookup,by=join_by(name == name))

          #revise values 
          results[varName] <- temp_join$value
        }
                                      
      }
      
    }
    
  }
  
  #special handling for geo lookup, because in function call previously it doesn't like it 
  if("region" %in% names(results)) {
    geoLevel <- "region"
    geoLevel_query <- "REGION"
  }
  else if("division" %in% names(results)) {
    geoLevel <- "division"
    geoLevel_query <- "DIVISION"
  }
  else {
    geoLevel <- "state"
    geoLevel_query <- "ST"
  }
  
  #pull lookup table for geo field
  lookup <- getLookup(geoLevel_query,year)
  
  #make a temp join but only keep the replaced char labels in the result column
  temp2 <- results[geoLevel]
  names(temp2)='name'
  temp2_join <- left_join(temp2,lookup,by=join_by(name == name))
  
  #revise values 
  results[geoLevel] <- temp2_join$value
  
  #return revised tibble
  return(results)
}
```

### Fcn: Query Multiple Years

This final function will take a set of 1+ years, loop through calls to query the Census on each year endpoint, then combine and format and return a single tibble!

```{r}
# function:
#   queryMultipleYears(years=c(2022),numVars,catVars,geoLevel,geoSubset)

# purpose:
#   Loop through calls to get query for each year, then combine and format, and return the final single tibble of data. Year is a column added to the results of each query.

# arguments: 
#   years - vector of numeric indicating each year of interest
#   numVars - vector of chars, 1 or more
#   catVars - vector of chars, 1 or more
#   geoLevel - one string matching permitted values
#   geoSubset - vector of chars, 1 or more, for subset by geoLevel (no restrictions)

# returns: 
#   Complete, consolidated, formatted tibble

# error handling: 
#   none!!

queryMultipleYears <- function(years=c(2022),numVars=c('AGEP','PWGTP'),catVars=c('SEX'),geoLevel='State',geoSubset=17) {
  
  #init large_tibble
  large_tibble <- tibble()
  
  #loop through all years in vector
  for (years_i in years) {
    
    #query the api
    results_query_i <- queryCensus(years_i,numVars,catVars)#,geoLevel,geoSubset)
    
    #translate to a tibble
    tibble_query_i <- getToTibble(results_query_i)
    
    #append the year variable
    tibble_query_i['Year'] <- years_i
    
    #add to large tibble
    large_tibble <- bind_rows(large_tibble,tibble_query_i)
    
  }
  
  #format
  large_tibble_formatted <- formatResults(large_tibble)
  
  #remove any NA rows which happened due to headers in every query
  large_tibble_formatted <- filter(large_tibble_formatted,!is.na(large_tibble_formatted[[1]]))
  
  #return
  return(large_tibble_formatted)
}
```

    -   Conditions:
        -   Call single year function repeatedly as needed.
        -   Combine data into one final tibble, including `year` variable.


## Validate Custom Query Function (1yr)

Now, let's run some sample calls. First, a call with no arguments, relying solely on defaults.

```{r}
test_results <- getToTibble(queryCensus())
test_results
```

Success! Next, let's try every possible parameter. For simplicity, we will use State=17.

```{r}
test_results <- getToTibble(
  queryCensus(2022,
              catVars=c('SEX','HISPEED','FER','HHL','JWTRNS','SCH','SCHL'),
              geoLevel='State',
              geoSubset = 17,
              numVars=c('AGEP','PWGTP','GASP','GRPIP','JWAP','JWDP','JWMNP'))
)
test_results
```

Success! Now, let's apply the formatting function to replace categorical enumerated elements, make numeric columns into numberic type, and fix column names.

```{r}
test_results_formatted <- formatResults(test_results)
test_results_formatted
```

Success!

## Validate Multi-Year Query Function

Lastly, let's call the function for multi-year results in a single tibble. Start simple with defaults, first.

```{r}
multi_test_tibble <- queryMultipleYears(years=c(2021,2022))
multi_test_tibble
```

Success! Now, once more with all variables and a third year.

```{r}
multi_test_tibble_2 <- queryMultipleYears(years=c(2019,2021,2022),
                                          catVars=c('SEX','HISPEED','FER','HHL','JWTRNS','SCH','SCHL'),
                                          geoLevel='State',
                                          geoSubset = 17,
                                          numVars=c('AGEP','PWGTP','GASP','GRPIP','JWAP','JWDP','JWMNP') )
multi_test_tibble_2
```

Success! Wow!

# Note on Person Level Records

The Census data returns a form of compressed results, where identical rows representing multiple people are condensed to one row with the field `PWGTP` representing the number of observations (people) associated with that row. We will not replicate these rows to keep our table smaller and simpler, but it must be considered for data summarization to ensure proper proportions/weights are incorporated.

# Summarizing...

Adding additional class of "census" to tibble.
```{r}
class(test_results_formatted) <- c("census", class(test_results_formatted))
```

```{r}
summary.census <- function(test_results_formatted, numVars = NULL, catVars= NULL) {
 
  if(is.null(numVars)) {
   numVars <- names(select(test_results_formatted, where(is.numeric), -PWGTP))
  }
  
  if(is.null(catVars)) {
    catVars <- names(select(test_results_formatted, -where(is.numeric)))
  }
  
  numeric_summary1 <-
  test_results_formatted |>
    summarize(across(all_of(numVars),
                    list(mean = ~ sum(. * PWGTP, na.rm = TRUE) / sum(., na.rm = TRUE)),
                     .names = "{.col}_mean"))
              
  numeric_summary2 <-
  test_results_formatted |>
    summarize(across(all_of(numVars),
       list(sd = ~ sqrt(sum(.^2 * PWGTP, na.rm = TRUE) / (sum(PWGTP, na.rm = TRUE) - (sum(. * PWGTP, na.rm = TRUE) / sum(., na.rm = TRUE))^2))),
                     .names = "{.col}_sd"))

  cat_count <-
  test_results_formatted |>
    drop_na(all_of(catVars)) |> 
  group_by(across(all_of(catVars))) |>
          summarize(count = n(), .groups = "drop")

return(list(mean_summary = numeric_summary1, sd_summary = numeric_summary2, categorial_count = cat_count))

}
```

```{r}
final_result <- summary.census(test_results_formatted,"AGEP", "SEX")
```

```{r}
#install.packages("ggplot2")
```

```{r}
library(ggplot2)
```

```{r}
plot_census <- function(test_results_formatted, numVars, catVars) {
   if (!(numVars %in% colnames(test_results_formatted))) {
    stop("Numeric variable does not exist.")
  }
  if (!(catVars %in% colnames(test_results_formatted))) {
    stop("Categorical variable does not exist.")
  }
   if(!is.factor(test_results_formatted[[catVars]]) && !is.character(test_results_formatted[[catVars]])) {
    stop("Variable needs to be categorical.")
  }
  if(!is.numeric(test_results_formatted[[numVars]])) {
    stop("Variable needs to be numeric.")
  }
  
  
  boxplot_census <- ggplot(test_results_formatted, aes(x = get(catVars), y = get(numVars), weight = PWGTP)) + geom_boxplot() +
    labs(title = paste("Boxplot of", numVars, "by", catVars),
         x = catVars,
         y + numVars) +
    theme_minimal()
    
  print(boxplot_census)
}
```

```{r}
#plot_census(test_results_formatted, "AGEP", "SEX")
```
